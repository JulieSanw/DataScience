x
names(x)
x <- list(Los Angeles = 1, Boston = 2, London = 3)
x <- list("Los Angeles" = 1, "Boston" = 2, London = 3)
x
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("R Programming")
swirl()
library(swirl)
swirl()
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- (1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
c
?c
z
z <- c(z,555)
c(z,555,z)
z*2 +100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2 +1000
my
my_div
getwd()
ls()
x <- 9
ls()
dir()
list.files
list.files.
?list.files.
?list.files()
list.file()
list.files()
?list.files.
?list.files
args(list.files)
old.dir <- getwd()
dir.create(testdir)
testdir<-dir.create()
testdir.create()
testdir <- dir.create()
dir.create(testdir)
testdir <- dir.create(getwd())
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
?file.rename
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
?file.path
file.path("mytest3.R")
file.path("mytest3.R","folder1")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2""testdir3"))
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path('testdir2','testdir3'))
dir.create(file.path("testdir2","testdir3"),recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive = True)
unlink("testdir2", recursive = TRUE)
setwd()
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by = 0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times = 40)
rep(c(0,1,2), times =10)
rep(c(0,1,2),each = 10)
?num_vect
num_vect <- vector(0.5,55,-10,6)
num_vect <- vector(0.5,55,-10,6)
??num_vect
?num_vect
num_vect <- c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vec >=6
num_vect >=6
my_char<-("My","name","is")
my_char<-c("My","name","is")
my_char
paste(my_char,collapse = " ")
c(my_char,"San")
my_name<-c(my_char,"San")
my_name
paste(mu_name, collaspse = " ")
paste(my_name, collaspse = " ")
paste(my_name, collapse = " ")
paste("Hello","world!",sep = " ")
paste(c("X", "Y", "Z"),sep = "")
paste(1:3,c("X", "Y", "Z"),sep = "")
paste(LETTERS, 1:4, sep = "-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data <-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data = NA
my_data == NA
sum(my_data)
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11,2,NA)
vects <- c(11,2,NA)
vect2 <- c(11,2,NA)
names(vect2)<-c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attribuyes(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <-my_vector
?matrim
?matrix
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, mymatrix_2)
identical(my_matrix, my_matrix2)
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames("patient", "age", "weight", "bp","rating", "test")
cnames<-c("patient", "age", "weight", "bp","rating", "test")
colnames(my_data)<-cnames
my_data
True==True
TRUE==TRUE
(FALSE == TRUE) ==FALSE
6==7
6<7
10<=10
5 ==7
5!=7
!(5==7)
FALSE&FALSE
TRUE &c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE, FALSE, FALSE)
TRUE|c(TRUE, FALSE, FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !False)
xor(5==6, !FALSE)
int<-sample(10)
ints<-sample(10)
ints
ints>5
ints>7
which(ints>7)
any(ints<0)
all(int>0)
all(ints>0)
Sys.Date()
mean(c(2,4,5,))
mean(c(2,4,5))
submit()
submit(x)
submit()
x
submit()
submit(x)
submit()
boring_function('My first function!')
boring_function
submit9)
submit()
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
submit9)
submit()
submit()
submit()
submit()
submit()
remainder(5)
View(boring_function)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(dev,c(1.4,3.6,7.9, 8.8)
)
evaluate(stdev,c(1.4,3.6,7.9, 8.8))
evaluate(stdev,c(1.4,3.6,7.9, 8.8))
evaluate(sd,c(1.4,3.6,7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[0]}, c(8,4,0))
evaluate(function(x){x(0)}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){tail(x)}, c(8,4,0))
evaluate(function(x){x(-1)}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8,4,0))
paste()
?paste()
?paste
patse("Programming","is", "fun!")
paste("Programming","is", "fun!")
submit()
submit()
submit()
submit()
telegram(HEHE)
telegram("HEHE")
submit()
args(mad_libs())
args(mad_libs
)
submit()
submit()
'I'%p%'love'%p%'R'
'I'%p%'love'%p%'R!'
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
clsvec<-sapply(flags, class)
cls_vect <-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flage[,11:17]
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6,))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags,unique)
lapply(unique_vals, function(elem){elem[2]})
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, summary)
tapply(flags$population, flag$landmass,  summary)
tapply(flags$population, flags$landmass,  summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20)
sample(1:20,10)
letters(26)
letters(1:26)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100, prob = c(0.3,0.7))
flips <- sample(c(0,1),100,replace = TRUE, prob = c(0.3,0.7))
flips
sum(1)
sum(flips)
?rbinom
rbinom(1,size = 100, prob = 0.7)
flips <- rbinom(1, 100, 0.7)
flips <- rbinom(100, 1, 0.7)
flips <- rbinom(n=100, size=1, prob=0.7)
flips2 <- rbinom(n=100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(mean=100,sd = 25)
rnorm(n = 10,mean=100,sd = 25)
rpois(5,mean = 10)
?rpois
rpois(5,10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <-colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1<-Sys.time9)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as,POSIXlt(Sys.time())
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t2 <- "October 17, 1986 08:24"
t3 <- "October 17, 1986 08:24"
strptime("t3, %B %d, %Y %H:%M")
strptime(t3, "%B %d, %Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4''
t4
class(t4)
Sys.time() >t1
Sys.time - t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
help()
help(cars)
head(cars)
plot(cars)
?plot
plot(speed, dist)
plot(cars$speed, cars$dist)
plot(cars$dist, cars$speed)
plot("Speed" = cars$speed, cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot( cars, main = "My Plot")
plot( cars, sub = "My Plot Subtitle")
Plot(cars, col = 2)
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
mtcars
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist9mtcars$mpg)
hist(mtcars$mpg)
set.seed(1)
rpois(5,2)
rnorm
?set.seed
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
e
}
makeCacheMatrix <- function(x = matrix()) {
dd
dd
d
d
inverse_matrix <<- matrix()
}
get <- function() x
setInverse <- function(solve) inverse_matrix <<- solve
getInverse <- function() inverse_matrix
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
}
}
}
}
(3,4,5)
}
}
}
}
source("Untitled.R")
x<-c(4,5,6)
cacheSolve(x)
y<-c(1:20)
dim(y)<-c(4,5)
y
cacheSolve(y)
solve(y)
z<-(1:16)
dim(z)<-(4,4)
dim(z)<-c(4,4)
solve(z)
solve(z)
solve(z)
w<-(1:9)
dim(w)<-c(3,3)
w
solve(w)
source("Untitled.R")
solve(w)
e<-c(1,3,4,5)
dim(e)<-c(2,2)
solve(e)
source("Untitled.R")
solve(e)
e<-(1,3,2,4)
e<-c(1,3,2,4)
e
dim(e)<-(2,2)
dim(e)<-c(2,2)
e
solve(e)
source("Untitled.R")
solve(e)
source("Untitled.R")
solve(e)
source("Untitled.R")
solve(e)
getwd
getwd()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
getwd()
setwd
?setwd
setwd("/Users/apple/rprog-data-ProgAssignment3-data")
getwd()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
source("outcome-of-care-measures.csv")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome
getwd
getwd()
ls
